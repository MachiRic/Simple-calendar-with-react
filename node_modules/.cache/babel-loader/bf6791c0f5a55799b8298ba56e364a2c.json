{"ast":null,"code":"import _classCallCheck from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Matilda/Documents/GitHub/calendar-react/src/Sidebar.js\";\nimport React, { Component } from \"react\";\nimport Model from \"./EventModel\";\n\nvar Sidebar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sidebar, _Component);\n\n  function Sidebar(props) {\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sidebar).call(this, props));\n    _this.state = {\n      status: \"LOADING\"\n    };\n    _this.getAllEvents = _this.getAllEvents.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.processResponse = _this.processResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Sidebar, [{\n    key: \"getAllEvents\",\n    value: function getAllEvents() {\n      var httpOptions = {\n        headers: {\n          'x-teamengine-test': \"YfKFyOBnLBvudfn\"\n        }\n      };\n      var url = \"https://projects.teamengine.com/calendar/events\";\n      return fetch(url, httpOptions).then(this.processResponse);\n    }\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(response) {\n      var CryptoJS = require(\"crypto-js\");\n\n      if (response.ok) {\n        return CryptoJS.AES.decrypt(response.toString(), 'teamengine-key');\n      }\n\n      throw response;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var CryptoJS = require(\"crypto-js\"); // when data is retrieved we update the state\n      // this will cause the component to re-render\n\n\n      this.getAllEvents().then(function (events) {\n        _this2.setState({\n          status: \"LOADED\",\n          events: JSON.parse(events.toString(CryptoJS.enc.Utf8))\n        });\n      }).catch(function () {\n        _this2.setState({\n          status: \"ERROR\"\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"The sidebar!\"));\n    }\n  }]);\n\n  return Sidebar;\n}(Component);\n\nexport default Sidebar;","map":{"version":3,"sources":["/Users/Matilda/Documents/GitHub/calendar-react/src/Sidebar.js"],"names":["React","Component","Model","Sidebar","props","state","status","getAllEvents","bind","processResponse","httpOptions","headers","url","fetch","then","response","CryptoJS","require","ok","AES","decrypt","toString","events","setState","JSON","parse","enc","Utf8","catch"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,cAAlB;;IAEMC,O;;;;;AACF,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAGA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,uDAAvB;AANe;AAOlB;;;;mCAEc;AACX,UAAME,WAAW,GAAG;AAChBC,QAAAA,OAAO,EAAE;AAAE,+BAAqB;AAAvB;AADO,OAApB;AAGA,UAAMC,GAAG,oDAAT;AACA,aAAOC,KAAK,CAACD,GAAD,EAAMF,WAAN,CAAL,CAAwBI,IAAxB,CAA6B,KAAKL,eAAlC,CAAP;AACH;;;oCAEeM,Q,EAAU;AACtB,UAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,UAAIF,QAAQ,CAACG,EAAb,EAAiB;AACb,eAAOF,QAAQ,CAACG,GAAT,CAAaC,OAAb,CAAqBL,QAAQ,CAACM,QAAT,EAArB,EAA0C,gBAA1C,CAAP;AACH;;AACD,YAAMN,QAAN;AACH;;;wCAEmB;AAAA;;AAChB,UAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB,CADgB,CAEhB;AACA;;;AACA,WAAKV,YAAL,GACKO,IADL,CACU,UAAAQ,MAAM,EAAI;AACZ,QAAA,MAAI,CAACC,QAAL,CAAc;AACVjB,UAAAA,MAAM,EAAE,QADE;AAEVgB,UAAAA,MAAM,EAAEE,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACD,QAAP,CAAgBL,QAAQ,CAACU,GAAT,CAAaC,IAA7B,CAAX;AAFE,SAAd;AAIH,OANL,EAOKC,KAPL,CAOW,YAAM;AACT,QAAA,MAAI,CAACL,QAAL,CAAc;AACVjB,UAAAA,MAAM,EAAE;AADE,SAAd;AAGH,OAXL;AAYH;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CADJ;AAKH;;;;EAlDiBL,S;;AAqDtB,eAAeE,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Model from \"./EventModel\";\n\nclass Sidebar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: \"LOADING\"\n        };\n        this.getAllEvents = this.getAllEvents.bind(this);\n        this.processResponse = this.processResponse.bind(this);\n    }\n\n    getAllEvents() {\n        const httpOptions = {\n            headers: { 'x-teamengine-test': \"YfKFyOBnLBvudfn\" }\n        };\n        const url = `https://projects.teamengine.com/calendar/events`;\n        return fetch(url, httpOptions).then(this.processResponse);\n    }\n\n    processResponse(response) {\n        var CryptoJS = require(\"crypto-js\");\n        if (response.ok) {\n            return CryptoJS.AES.decrypt(response.toString(), 'teamengine-key');\n        }\n        throw response;\n    }\n\n    componentDidMount() {\n        var CryptoJS = require(\"crypto-js\");\n        // when data is retrieved we update the state\n        // this will cause the component to re-render\n        this.getAllEvents()\n            .then(events => {\n                this.setState({\n                    status: \"LOADED\",\n                    events: JSON.parse(events.toString(CryptoJS.enc.Utf8))\n                });\n            })\n            .catch(() => {\n                this.setState({\n                    status: \"ERROR\"\n                });\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <p>The sidebar!</p>\n            </div>\n        );\n    }\n}\n\nexport default Sidebar;\n"]},"metadata":{},"sourceType":"module"}