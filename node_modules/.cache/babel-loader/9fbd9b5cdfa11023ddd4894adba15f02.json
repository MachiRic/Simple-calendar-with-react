{"ast":null,"code":"import _classCallCheck from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar httpOptions = {\n  headers: {\n    'x-teamengine-test': \"YfKFyOBnLBvudfn\"\n  }\n};\n\nvar Model =\n/*#__PURE__*/\nfunction () {\n  function Model() {\n    _classCallCheck(this, Model);\n  }\n\n  _createClass(Model, [{\n    key: \"getAllEvents\",\n    value: function getAllEvents() {\n      var url = \"https://projects.teamengine.com/calendar/events\";\n      return fetch(url, httpOptions).then(this.processResponse);\n    }\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(response) {\n      var CryptoJS = require(\"crypto-js\");\n\n      if (response.ok) {\n        return CryptoJS.AES.decrypt(response.toString(), 'teamengine-key');\n      }\n\n      throw response;\n    }\n  }]);\n\n  return Model;\n}();\n\nexport default Model;","map":{"version":3,"sources":["/Users/Matilda/Documents/GitHub/calendar-react/src/Model.js"],"names":["httpOptions","headers","Model","url","fetch","then","processResponse","response","CryptoJS","require","ok","AES","decrypt","toString"],"mappings":";;AACA,IAAMA,WAAW,GAAG;AACnBC,EAAAA,OAAO,EAAE;AAAE,yBAAqB;AAAvB;AADU,CAApB;;IAGMC,K;;;;;;;;;mCAEU;AACd,UAAMC,GAAG,oDAAT;AACA,aAAOC,KAAK,CAACD,GAAD,EAAMH,WAAN,CAAL,CAAwBK,IAAxB,CAA6B,KAAKC,eAAlC,CAAP;AACE;;;oCAEeC,Q,EAAU;AAC3B,UAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,UAAIF,QAAQ,CAACG,EAAb,EAAiB;AACf,eAAOF,QAAQ,CAACG,GAAT,CAAaC,OAAb,CAAqBL,QAAQ,CAACM,QAAT,EAArB,EAA0C,gBAA1C,CAAP;AACD;;AACD,YAAMN,QAAN;AACE;;;;;;AAKJ,eAAeL,KAAf","sourcesContent":["\nconst httpOptions = {\n\theaders: { 'x-teamengine-test': \"YfKFyOBnLBvudfn\"}\n  };\nclass Model {\n\n\tgetAllEvents() {\n\t\tconst url = `https://projects.teamengine.com/calendar/events`;\n\t\treturn fetch(url, httpOptions).then(this.processResponse);\n\t  }\n\t\n\t  processResponse(response) {\n\t\tvar CryptoJS = require(\"crypto-js\");  \n\t\tif (response.ok) {\n\t\t  return CryptoJS.AES.decrypt(response.toString(), 'teamengine-key');\n\t\t}\n\t\tthrow response;\n\t  }\n\n}\n\n\nexport default Model;\n\n\n"]},"metadata":{},"sourceType":"module"}