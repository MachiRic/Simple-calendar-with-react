{"ast":null,"code":"import _classCallCheck from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Matilda/Documents/GitHub/calendar-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Matilda/Documents/GitHub/calendar-react/src/Sidebar.js\";\nimport React, { Component } from \"react\";\nimport AES from 'crypto-js/aes';\nimport enc from 'crypto-js/enc-utf8';\nimport Fetcher from \"./fetchfuncs\";\n\nvar Sidebar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sidebar, _Component);\n\n  function Sidebar(props) {\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sidebar).call(this, props));\n    _this.state = {\n      status: \"LOADING\",\n      events: \"\"\n    };\n    _this.fetcher = new Fetcher();\n    _this.getAllEvents = _this.getAllEvents.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.processResponse = _this.processResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Sidebar, [{\n    key: \"getAllEvents\",\n    value: function getAllEvents() {\n      var httpOptions = {\n        headers: {\n          'x-teamengine-test': \"YfKFyOBnLBvudfn\"\n        }\n      };\n      var url = \"https://projects.teamengine.com/calendar/events\";\n      return fetch(url, httpOptions).then(function (response) {\n        return response.text();\n      });\n    }\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(response) {\n      return JSON.parse(AES.decrypt(response, 'teamengine-key').toString(enc));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // when data is retrieved we update the state\n      // this will cause the component to re-render\n      this.getAllEvents().then(function (events) {\n        console.log(AES.decrypt(events, \"teamengine-key\").toString(enc));\n        events = _this2.processResponse(events).events;\n\n        _this2.setState({\n          status: \"LOADED\",\n          events: events\n        });\n      }).catch(function () {\n        _this2.setState({\n          status: \"ERROR\"\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.events); // depending on the state we either generate\n      // useful message to the user or show the list\n      // of returned dishes\n\n      var events = null;\n\n      switch (this.state.status) {\n        case \"LOADING\":\n          events = React.createElement(\"em\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, \"Loading...\");\n          break;\n\n        case \"LOADED\":\n          events = this.state.events.map(function (event) {\n            return console.log(event);\n          });\n          break;\n\n        default:\n          events = React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, \"Failed to load data, please try again\");\n          break;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"events\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, events);\n    }\n  }]);\n\n  return Sidebar;\n}(Component);\n\nexport default Sidebar;","map":{"version":3,"sources":["/Users/Matilda/Documents/GitHub/calendar-react/src/Sidebar.js"],"names":["React","Component","AES","enc","Fetcher","Sidebar","props","state","status","events","fetcher","getAllEvents","bind","processResponse","httpOptions","headers","url","fetch","then","response","text","JSON","parse","decrypt","toString","console","log","setState","catch","map","event"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,OAAP,MAAoB,cAApB;;IAEMC,O;;;;;AACF,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,SADC;AAETC,MAAAA,MAAM,EAAE;AAFC,KAAb;AAIA,UAAKC,OAAL,GAAe,IAAIN,OAAJ,EAAf;AACA,UAAKO,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,uDAAvB;AARe;AASlB;;;;mCAEc;AACX,UAAME,WAAW,GAAG;AAChBC,QAAAA,OAAO,EAAE;AAAE,+BAAqB;AAAvB;AADO,OAApB;AAGA,UAAMC,GAAG,oDAAT;AACA,aAAOC,KAAK,CAACD,GAAD,EAAMF,WAAN,CAAL,CAAwBI,IAAxB,CAA6B,UAAAC,QAAQ,EAAI;AAAC,eAAOA,QAAQ,CAACC,IAAT,EAAP;AAAuB,OAAjE,CAAP;AACH;;;oCAEeD,Q,EAAU;AAClB,aAAOE,IAAI,CAACC,KAAL,CAAWpB,GAAG,CAACqB,OAAJ,CAAYJ,QAAZ,EAAsB,gBAAtB,EAAwCK,QAAxC,CAAiDrB,GAAjD,CAAX,CAAP;AAEP;;;wCAEmB;AAAA;;AAChB;AACA;AACA,WAAKQ,YAAL,GACKO,IADL,CACU,UAAAT,MAAM,EAAI;AACZgB,QAAAA,OAAO,CAACC,GAAR,CAAYxB,GAAG,CAACqB,OAAJ,CAAYd,MAAZ,EAAoB,gBAApB,EAAsCe,QAAtC,CAA+CrB,GAA/C,CAAZ;AACAM,QAAAA,MAAM,GAAG,MAAI,CAACI,eAAL,CAAqBJ,MAArB,EAA6BA,MAAtC;;AACA,QAAA,MAAI,CAACkB,QAAL,CAAc;AACVnB,UAAAA,MAAM,EAAE,QADE;AAEVC,UAAAA,MAAM,EAAEA;AAFE,SAAd;AAIH,OARL,EASKmB,KATL,CASW,YAAM;AACT,QAAA,MAAI,CAACD,QAAL,CAAc;AACVnB,UAAAA,MAAM,EAAE;AADE,SAAd;AAGH,OAbL;AAcH;;;6BAEQ;AACLiB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWE,MAAvB,EADK,CAEL;AACA;AACA;;AACA,UAAIA,MAAM,GAAG,IAAb;;AACA,cAAQ,KAAKF,KAAL,CAAWC,MAAnB;AACI,aAAK,SAAL;AACIC,UAAAA,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAT;AACA;;AACJ,aAAK,QAAL;AACIA,UAAAA,MAAM,GAAG,KAAKF,KAAL,CAAWE,MAAX,CAAkBoB,GAAlB,CAAsB,UAAAC,KAAK;AAAA,mBAChCL,OAAO,CAACC,GAAR,CAAYI,KAAZ,CADgC;AAAA,WAA3B,CAAT;AAGA;;AACJ;AACIrB,UAAAA,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAT;AACA;AAXR;;AAaA,aACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,MADL,CADJ;AAKH;;;;EApEiBR,S;;AAuEtB,eAAeI,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport AES from 'crypto-js/aes'\nimport enc from 'crypto-js/enc-utf8'\nimport Fetcher from \"./fetchfuncs\"\n\nclass Sidebar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: \"LOADING\",\n            events: \"\"\n        };\n        this.fetcher = new Fetcher();\n        this.getAllEvents = this.getAllEvents.bind(this);\n        this.processResponse = this.processResponse.bind(this);\n    }\n\n    getAllEvents() {\n        const httpOptions = {\n            headers: { 'x-teamengine-test': \"YfKFyOBnLBvudfn\" }\n        };\n        const url = `https://projects.teamengine.com/calendar/events`;\n        return fetch(url, httpOptions).then(response => {return response.text()});\n    }\n\n    processResponse(response) {\n            return JSON.parse(AES.decrypt(response, 'teamengine-key').toString(enc));\n        \n    }\n\n    componentDidMount() {\n        // when data is retrieved we update the state\n        // this will cause the component to re-render\n        this.getAllEvents()\n            .then(events => {\n                console.log(AES.decrypt(events, \"teamengine-key\").toString(enc))\n                events = this.processResponse(events).events;\n                this.setState({\n                    status: \"LOADED\",\n                    events: events\n                });\n            })\n            .catch(() => {\n                this.setState({\n                    status: \"ERROR\"\n                });\n            });\n    }\n\n    render() {\n        console.log(this.state.events);\n        // depending on the state we either generate\n        // useful message to the user or show the list\n        // of returned dishes\n        let events = null;\n        switch (this.state.status) {\n            case \"LOADING\":\n                events = <em>Loading...</em>;\n                break;\n            case \"LOADED\":\n                events = this.state.events.map(event => (\n                    console.log(event)\n                ));\n                break;\n            default:\n                events = <b>Failed to load data, please try again</b>;\n                break;\n        }\n        return (\n            <div className=\"events\">\n                {events}\n            </div>\n        );\n    }\n}\n\nexport default Sidebar;\n"]},"metadata":{},"sourceType":"module"}